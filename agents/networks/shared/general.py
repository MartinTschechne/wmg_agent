# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
import torch
import torch.nn as nn
import torch.nn.functional as F
import math
import warnings

BIAS_INIT = 0.0

class LayerNorm(nn.Module):
    def __init__(self, size, variance_epsilon=1e-12):
        super(LayerNorm, self).__init__()
        self.gamma = nn.Parameter(torch.ones(size))
        self.beta = nn.Parameter(torch.ones(size)*BIAS_INIT)
        self.variance_epsilon = variance_epsilon

    def forward(self, x):
        u = x.mean(-1, keepdim=True)
        s = (x - u).pow(2).mean(-1, keepdim=True)
        x = (x - u) / torch.sqrt(s + self.variance_epsilon)
        return self.gamma * x + self.beta


class LinearLayer(nn.Module):  # Adds weight initialization options on top of nn.Linear.
    def __init__(self, input_size, output_size):
        super(LinearLayer, self).__init__()
        self.layer = nn.Linear(input_size, output_size)
        self.layer.bias.data.fill_(0.)

    def forward(self, x):
        output = self.layer(x)
        return output


class ResidualLayer(nn.Module):
    def __init__(self, input_size, output_size):
        super(ResidualLayer, self).__init__()
        self.linear_layer = LinearLayer(input_size, output_size)

    def forward(self, x, prev_input):
        output = self.linear_layer(x)
        output += prev_input
        return output

class LayerNormResidual(nn.Module):
    def __init__(self, input_size, output_size):
        super(LayerNormResidual, self).__init__()
        self.linear_layer = LinearLayer(input_size, output_size)
        self.layer_norm = LayerNorm(output_size)

    def forward(self, x, prev_input):
        output = self.linear_layer(x)
        output = self.layer_norm(output)
        output += prev_input
        return output

class Normalize(nn.Module):
    def __init__(self,num_heads,variance_epsilon=1e-12):
        super(Normalize, self).__init__()
        self.gain = nn.Parameter(torch.ones([1,num_heads,1,1]))
        self.bias = nn.Parameter(torch.ones([1,num_heads,1,1])*BIAS_INIT)
        self.variance_epsilon = variance_epsilon

    def forward(self, x):
        u = x.mean(-1, keepdim=True)
        s = x - u
        s = s.pow(2)
        s = s.mean(-1, keepdim=True)
        x = (x - u) / torch.sqrt(s + self.variance_epsilon)
        return self.gain * x + self.bias


class SeparateActorCriticLayers(nn.Module):
    def __init__(self, input_size, num_layers, hidden_layer_size, action_space_size):
        super(SeparateActorCriticLayers, self).__init__()
        assert num_layers == 2
        self.critic_linear_1 = LinearLayer(input_size, hidden_layer_size)
        self.critic_linear_2 = LinearLayer(hidden_layer_size, 1)
        self.actor_linear_1 = LinearLayer(input_size, hidden_layer_size)
        self.actor_linear_2 = LinearLayer(hidden_layer_size, action_space_size)
        self.actor_linear_2.layer.weight.data.fill_(0.)

    def forward(self, x):
        value = self.critic_linear_1(x)
        value = F.relu(value)
        value = self.critic_linear_2(value)
        policy = self.actor_linear_1(x)
        policy = F.relu(policy)
        policy = self.actor_linear_2(policy)
        return policy, value


class SharedActorCriticLayers(nn.Module):
    def __init__(self, input_size, num_layers, hidden_layer_size, action_space_size):
        super(SharedActorCriticLayers, self).__init__()
        assert num_layers == 2
        self.linear_1 = LinearLayer(input_size, hidden_layer_size)
        self.critic_linear_2 = LinearLayer(hidden_layer_size, 1)
        self.actor_linear_2 = LinearLayer(hidden_layer_size, action_space_size)
        self.actor_linear_2.layer.weight.data.fill_(0.)

    def forward(self, x):
        shared = self.linear_1(x)
        shared = F.relu(shared)
        value = self.critic_linear_2(shared)
        policy = self.actor_linear_2(shared)
        return policy, value


# porting truncated normal initialization from v1.7.1 to v1.3.1
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value

    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)
